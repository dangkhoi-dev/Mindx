// ================================
// 1. GET - L·∫•y d·ªØ li·ªáu
// ================================
async function getAPI() {
    try {
        console.log("üì• ƒêang g·ªçi GET API...");
        
        const response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
        
        if (!response.ok) {
            throw new Error(`L·ªói HTTP! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log("‚úÖ GET th√†nh c√¥ng:", data);
        return data;
    } catch (error) {
        console.error("‚ùå L·ªói GET:", error.message);
    }
}

// ================================
// 2. POST - T·∫°o d·ªØ li·ªáu m·ªõi
// ================================
async function postAPI() {
    try {
        console.log("üì§ ƒêang g·ªçi POST API...");
        
        const newPost = {
            title: 'B√†i vi·∫øt m·ªõi t·ª´ JavaScript',
            body: 'ƒê√¢y l√† n·ªôi dung c·ªßa b√†i vi·∫øt m·ªõi.',
            userId: 1
        };
        
        const response = await fetch("https://jsonplaceholder.typicode.com/posts", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newPost)
        });
        
        if (!response.ok) {
            throw new Error(`L·ªói HTTP! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log("‚úÖ POST th√†nh c√¥ng:", data);
        return data;
    } catch (error) {
        console.error("‚ùå L·ªói POST:", error.message);
        
    }
}

// ================================
// 3. PUT - C·∫≠p nh·∫≠t d·ªØ li·ªáu
// ================================
async function putAPI() {
    try {
        console.log("üîÑ ƒêang g·ªçi PUT API...");
        
        const updatedPost = {
            id: 1,
            title: 'B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
            body: 'N·ªôi dung ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a.',
            userId: 1
        };
        
        const response = await fetch("https://jsonplaceholder.typicode.com/posts/1", {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedPost)
        });
        
        if (!response.ok) {
            throw new Error(`L·ªói HTTP! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log("‚úÖ PUT th√†nh c√¥ng:", data);
        return data;
    } catch (error) {
        console.error("‚ùå L·ªói PUT:", error.message);
    }
}

// ================================
// 4. DELETE - X√≥a d·ªØ li·ªáu
// ================================
async function deleteAPI() {
    try {
        console.log("üóëÔ∏è ƒêang g·ªçi DELETE API...");
        
        const response = await fetch("https://jsonplaceholder.typicode.com/posts/1", {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error(`L·ªói HTTP! status: ${response.status}`);
        }
        
        console.log("‚úÖ DELETE th√†nh c√¥ng! Post ƒë√£ ƒë∆∞·ª£c x√≥a");
        return true;
    } catch (error) {
        console.error("‚ùå L·ªói DELETE:", error.message);
    }
}

// ================================
// Ch·∫°y t·∫•t c·∫£ v√≠ d·ª•
// ================================
async function runAllExamples() {
    console.log("üöÄ B·∫Øt ƒë·∫ßu demo 4 ph∆∞∆°ng th·ª©c API\n");
    
    // 1. GET - L·∫•y d·ªØ li·ªáu
    await getAPI();
    console.log("\n" + "=".repeat(50) + "\n");
    
    // 2. POST - T·∫°o m·ªõi
    await postAPI();
    console.log("\n" + "=".repeat(50) + "\n");
    
    // 3. PUT - C·∫≠p nh·∫≠t
    await putAPI();
    console.log("\n" + "=".repeat(50) + "\n");
    
    // 4. DELETE - X√≥a
    await deleteAPI();
    
    console.log("\nüéâ Ho√†n th√†nh demo t·∫•t c·∫£ ph∆∞∆°ng th·ª©c API!");
}

// Ch·∫°y demo
runAllExamples();
  